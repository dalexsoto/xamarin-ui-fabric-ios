// Generated by Apple Swift version 5.0.1 effective-4.2 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="OfficeUIFabric",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class UIView;

/// AccessibleViewDelegate is used to pass responsibility for built in accessibility methods from a view to its parent view controller.
/// Each AccessibleViewDelegate method is meant to be called in the native accessibility method of the view that has the same name as AccessibleViewDelegate method prefix (eg. accessibilityActivate -> accessibilityActivateForAccessibleView)
/// All AccessibleViewDelegate method are optionals
SWIFT_PROTOCOL("_TtP14OfficeUIFabric22AccessibleViewDelegate_")
@protocol AccessibleViewDelegate
@optional
- (NSString * _Nullable)accessibilityValueForAccessibleView:(UIView * _Nonnull)accessibleView SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)accessibilityLabelForAccessibleView:(UIView * _Nonnull)accessibleView SWIFT_WARN_UNUSED_RESULT;
- (BOOL)accessibilityActivateForAccessibleView:(UIView * _Nonnull)accessibleView SWIFT_WARN_UNUSED_RESULT;
- (void)accessibilityIncrementForAccessibleView:(UIView * _Nonnull)accessibleView;
- (void)accessibilityDecrementForAccessibleView:(UIView * _Nonnull)accessibleView;
- (BOOL)accessibilityPerformMagicTapForAccessibleView:(UIView * _Nonnull)accessibleView SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nullable)accessibilityElementsForAccessibleView:(UIView * _Nonnull)accessibleView SWIFT_WARN_UNUSED_RESULT;
@end

@class UITableView;

SWIFT_PROTOCOL("_TtP14OfficeUIFabric27AccessibleTableViewDelegate_")
@protocol AccessibleTableViewDelegate <AccessibleViewDelegate>
@optional
- (NSString * _Nullable)accessibilityValueForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath forTableView:(UITableView * _Nonnull)forTableView SWIFT_WARN_UNUSED_RESULT;
@end




@class UIButton;
@class NSCoder;

/// <code>MSActionsCell</code> is used to present a button or set of buttons (max of 2) as a row in a table view. After being added to the table view a target can be added to the button(s) with a corresponding action.
/// <code>MSActionsCell</code> supports a maximum of 2 buttons that are displayed in a single row with a vertical separator between them. A button can be denoted ‘destructive’ by setting the ‘action(X)IsDestructive’ property to true. When true, this property causes the button to be displayed with red title label text to signify a ‘destructive’ action.
SWIFT_CLASS("_TtC14OfficeUIFabric13MSActionsCell")
@interface MSActionsCell : UITableViewCell
@property (nonatomic, readonly, strong) UIButton * _Nonnull action1Button;
@property (nonatomic, readonly, strong) UIButton * _Nonnull action2Button;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Sets up the action cell with 1 or 2 actions. A ‘destructive’ action is displayed with red label text.
/// \param action1Title The title of the first action.
///
/// \param action2Title The title of the second action.
///
/// \param action1IsDestructive Bool describing if the first action is ‘destructive’.
///
/// \param action2IsDestructive Bool describing if the second action is ‘destructive’.
///
- (void)setupWithAction1Title:(NSString * _Nonnull)action1Title action2Title:(NSString * _Nonnull)action2Title action1IsDestructive:(BOOL)action1IsDestructive action2IsDestructive:(BOOL)action2IsDestructive;
- (void)layoutSubviews;
- (void)prepareForReuse;
- (void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
@end


SWIFT_CLASS("_TtC14OfficeUIFabric23MSActivityIndicatorCell")
@interface MSActivityIndicatorCell : UITableViewCell
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (void)prepareForReuse;
- (void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
@end

enum MSActivityIndicatorViewSize : NSInteger;

/// <code>MSActivityIndicatorView</code> is meant to be used as a drop-in replacement of <code>UIActivityIndicatorView</code>. Its API strictly matches <code>UIActivityIndicatorView</code> API. The only exception is the replacement of <code>UIActivityIndicatorViewStyle</code> with <code>MSActivityIndicatorViewSize</code> that doesn’t include any color definition.
SWIFT_CLASS("_TtC14OfficeUIFabric23MSActivityIndicatorView")
@interface MSActivityIndicatorView : UIView
@property (nonatomic, readonly) BOOL isAnimating;
- (nonnull instancetype)initWithSize:(enum MSActivityIndicatorViewSize)size;
- (nonnull instancetype)initWithSideSize:(CGFloat)sideSize strokeThickness:(CGFloat)strokeThickness OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)startAnimating;
- (void)layoutSubviews;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)sizeToFit;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

/// <code>MSActivityIndicatorViewSize</code> defines the side size of the loader and the thickness of the loader stroke.
typedef SWIFT_ENUM(NSInteger, MSActivityIndicatorViewSize, closed) {
  MSActivityIndicatorViewSizeXSmall = 0,
  MSActivityIndicatorViewSizeSmall = 1,
  MSActivityIndicatorViewSizeMedium = 2,
  MSActivityIndicatorViewSizeLarge = 3,
  MSActivityIndicatorViewSizeXLarge = 4,
};

typedef SWIFT_ENUM(NSInteger, MSAvatarSize, closed) {
  MSAvatarSizeXSmall = 0,
  MSAvatarSizeSmall = 1,
  MSAvatarSizeMedium = 2,
  MSAvatarSizeLarge = 3,
  MSAvatarSizeXLarge = 4,
  MSAvatarSizeXxLarge = 5,
};

typedef SWIFT_ENUM(NSInteger, MSAvatarStyle, closed) {
  MSAvatarStyleCircle = 0,
  MSAvatarStyleSquare = 1,
};

@class UIColor;
@class UIImage;

/// <code>MSAvatarView</code> is used to present an image or initials view representing an entity such as a person.
/// If an image is provided the image is presented in either a circular or a square view based on the <code>MSAvatarStyle</code> provided with the initials view presented as a fallback.
/// The initials used in the initials view are generated from the provided primary text (e.g. a name) or secondary text (e.g. an email address) used to initialize the avatar view.
SWIFT_CLASS("_TtC14OfficeUIFabric12MSAvatarView")
@interface MSAvatarView : UIView
@property (nonatomic) enum MSAvatarSize avatarSize;
@property (nonatomic, strong) UIColor * _Nonnull avatarBackgroundColor;
@property (nonatomic) enum MSAvatarStyle style;
/// Initializes the avatar view with a size and an optional border
/// \param avatarSize The MSAvatarSize to configure the avatar view with
///
/// \param hasBorder Boolean describing whether or not to show a border around the avatarView
///
/// \param style The <code>MSAvatarStyle</code> to indicate whether the avatar should be displayed as a circle or a square
///
- (nonnull instancetype)initWithAvatarSize:(enum MSAvatarSize)avatarSize withBorder:(BOOL)hasBorder style:(enum MSAvatarStyle)style OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)layoutSubviews;
/// Sets up the avatarView to show an image or initials based on if an image is provided
/// \param primaryText The primary text to create initials with (e.g. a name)
///
/// \param secondaryText The secondary text to create initials with if primary text is not provided (e.g. an email address)
///
/// \param image The image to be displayed
///
- (void)setupWithPrimaryText:(NSString * _Nullable)primaryText secondaryText:(NSString * _Nullable)secondaryText image:(UIImage * _Nullable)image;
/// Sets up the avatarView with an image
/// \param image The image to be displayed
///
- (void)setupWithImage:(UIImage * _Nonnull)image;
@property (nonatomic) BOOL isAccessibilityElement;
@property (nonatomic, copy) NSString * _Nullable accessibilityLabel;
@property (nonatomic) UIAccessibilityTraits accessibilityTraits;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class MSBadgeView;
@class MSBadgeViewDataSource;
@protocol MSBadgeFieldDelegate;

/// MSBadgeField is a UIView that acts as a UITextField that can contains badges with enclosed text.
/// It supports:
/// <ul>
///   <li>
///     badge selection. Selection leaves the order of pills unchanged.
///   </li>
///   <li>
///     badge drag and drop between multiple MSBadgeFields
///   </li>
///   <li>
///     placeholder (hidden when text is not empty) or introduction text (not hidden when text is not empty)
///   </li>
///   <li>
///     custom input accessory view
///   </li>
///   <li>
///     max number of lines, with custom “+XX” badge to indicate badges that are not displayed
///   </li>
///   <li>
///     voiceover and dynamic text sizing
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14OfficeUIFabric12MSBadgeField")
@interface MSBadgeField : UIView
/// The max number of lines on which the badges should be laid out. If badges can’t fit in the available number of lines, the textfield will add a <code>moreBadge</code> at the end of the last displayed line.
/// Set numberOfLines to 0 to remove any limit for the number of lines.
/// The default value is 0.
/// Note: you should not use drag and drop with text fields that have a numberOfLines != 0. The resulting behavior is unknown.
@property (nonatomic) NSInteger numberOfLines;
/// Note: in non-editable mode, the user CAN select badges but CAN’T add, delete or drag badge views
@property (nonatomic) BOOL isEditable;
/// isEnabled is a proxy property that is transmitted to all the badge views. Badge views should have their style altered if this is true. But this is the decision of whoever implement a new badge view abstract class. Note that this does not change the touch handling behavior in any way.
@property (nonatomic) BOOL isEnabled;
@property (nonatomic, readonly, copy) NSArray<MSBadgeView *> * _Nonnull badges;
@property (nonatomic, readonly, copy) NSArray<MSBadgeViewDataSource *> * _Nonnull badgeDataSources;
@property (nonatomic, weak) id <MSBadgeFieldDelegate> _Nullable delegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// Badges the current text field content
- (void)badgeText;
- (void)addBadgesWithDataSources:(NSArray<MSBadgeViewDataSource *> * _Nonnull)dataSources;
- (void)addBadgeWithDataSource:(MSBadgeViewDataSource * _Nonnull)dataSource fromUserAction:(BOOL)fromUserAction updateConstrainedBadges:(BOOL)updateConstrainedBadges;
- (void)deleteBadgesWithDataSource:(MSBadgeViewDataSource * _Nonnull)dataSource;
- (void)selectBadge:(MSBadgeView * _Nonnull)badge;
@property (nonatomic, readonly, copy) NSString * _Nonnull textFieldContent;
- (void)resetTextFieldContent;
- (BOOL)becomeFirstResponder;
@property (nonatomic, readonly) BOOL isFirstResponder;
- (BOOL)resignFirstResponder;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (NSInteger)accessibilityElementCount SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)accessibilityElementAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)indexOfAccessibilityElement:(id _Nonnull)element SWIFT_WARN_UNUSED_RESULT;
- (void)voiceOverFocusOnTextFieldAndAnnounce:(NSString * _Nullable)announcement;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP14OfficeUIFabric19MSBadgeViewDelegate_")
@protocol MSBadgeViewDelegate
- (void)didSelectBadge:(MSBadgeView * _Nonnull)badge;
- (void)didTapSelectedBadge:(MSBadgeView * _Nonnull)badge;
@end


@interface MSBadgeField (SWIFT_EXTENSION(OfficeUIFabric)) <MSBadgeViewDelegate>
- (void)didSelectBadge:(MSBadgeView * _Nonnull)badge;
- (void)didTapSelectedBadge:(MSBadgeView * _Nonnull)badge;
@end

@class UITextField;

@interface MSBadgeField (SWIFT_EXTENSION(OfficeUIFabric)) <UITextFieldDelegate>
- (BOOL)textFieldShouldBeginEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP14OfficeUIFabric20MSBadgeFieldDelegate_")
@protocol MSBadgeFieldDelegate
- (MSBadgeViewDataSource * _Nonnull)badgeField:(MSBadgeField * _Nonnull)badgeField badgeDataSourceForText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
@optional
- (void)badgeField:(MSBadgeField * _Nonnull)badgeField willChangeTextFieldContentWithText:(NSString * _Nonnull)newText;
- (void)badgeFieldDidChangeTextFieldContent:(MSBadgeField * _Nonnull)badgeField isPaste:(BOOL)isPaste;
- (BOOL)badgeField:(MSBadgeField * _Nonnull)badgeField shouldBadgeText:(NSString * _Nonnull)text forSoftBadgingString:(NSString * _Nonnull)badgingString SWIFT_WARN_UNUSED_RESULT;
/// <code>didAddBadge</code> and <code>didDeleteBadge</code> won’t be called in the following case:
/// add/delete were not triggered by a user action. In this case, handle the consequences of a add/delete after the external class called setupViewWithBadgeDataSources or addBadgeWithDataSource
- (void)badgeField:(MSBadgeField * _Nonnull)badgeField didAddBadge:(MSBadgeView * _Nonnull)badge;
- (void)badgeField:(MSBadgeField * _Nonnull)badgeField didDeleteBadge:(MSBadgeView * _Nonnull)badge;
/// <code>shouldAddBadgeForBadgeDataSource</code> defaults to true. Called only if the add results from a user action.
- (BOOL)badgeField:(MSBadgeField * _Nonnull)badgeField shouldAddBadgeForBadgeDataSource:(MSBadgeViewDataSource * _Nonnull)badgeDataSource SWIFT_WARN_UNUSED_RESULT;
- (MSBadgeView * _Nonnull)badgeField:(MSBadgeField * _Nonnull)badgeField newBadgeForBadgeDataSource:(MSBadgeViewDataSource * _Nonnull)badgeDataSource SWIFT_WARN_UNUSED_RESULT;
- (MSBadgeView * _Nonnull)badgeField:(MSBadgeField * _Nonnull)badgeField newMoreBadgeForBadgeDataSources:(NSArray<MSBadgeViewDataSource *> * _Nonnull)badgeDataSources SWIFT_WARN_UNUSED_RESULT;
- (void)badgeFieldContentHeightDidChange:(MSBadgeField * _Nonnull)badgeField;
- (void)badgeField:(MSBadgeField * _Nonnull)badgeField didTapSelectedBadge:(MSBadgeView * _Nonnull)badge;
- (BOOL)badgeField:(MSBadgeField * _Nonnull)badgeField shouldDragBadge:(MSBadgeView * _Nonnull)badge SWIFT_WARN_UNUSED_RESULT;
/// <code>destinationBadgeField</code> is nil if the badge is animated back to its original field.
/// <code>newBadge</code> is nil if the destination field returned false to <code>badgeField:shouldAddBadgeForBadgeDataSource</code> when the user dropped the badge.
- (void)badgeField:(MSBadgeField * _Nonnull)originbadgeField didEndDraggingOriginBadge:(MSBadgeView * _Nonnull)originBadge toBadgeField:(MSBadgeField * _Nullable)destinationBadgeField withNewBadge:(MSBadgeView * _Nullable)newBadge;
- (BOOL)badgeFieldShouldBeginEditing:(MSBadgeField * _Nonnull)badgeField SWIFT_WARN_UNUSED_RESULT;
- (void)badgeFieldDidBeginEditing:(MSBadgeField * _Nonnull)badgeField;
- (void)badgeFieldDidEndEditing:(MSBadgeField * _Nonnull)badgeField;
/// <code>badgeFieldShouldReturn</code> is called only when there’s no text in the text field, otherwise <code>MSBadgeField</code> badges the text and doesn’t call this.
- (BOOL)badgeFieldShouldReturn:(MSBadgeField * _Nonnull)badgeField SWIFT_WARN_UNUSED_RESULT;
@end


/// <code>MSBadgeView</code> is used to present text with a colored background in the form of a “badge”. It is used in <code>MSBadgeField</code> to represent a selected item.
/// <code>MSBadgeView</code> can be selected with a tap gesture and tapped again after entering a selected state for the purpose of displaying more details about the entity represented by the selected badge.
SWIFT_CLASS("_TtC14OfficeUIFabric11MSBadgeView")
@interface MSBadgeView : UIView
@property (nonatomic, strong) MSBadgeViewDataSource * _Nullable dataSource;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSString * _Nullable accessibilityLabel;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

enum MSBadgeViewStyle : NSInteger;

SWIFT_CLASS("_TtC14OfficeUIFabric21MSBadgeViewDataSource")
@interface MSBadgeViewDataSource : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text style:(enum MSBadgeViewStyle)style OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, MSBadgeViewStyle, closed) {
  MSBadgeViewStyleDefault = 0,
  MSBadgeViewStyleWarning = 1,
  MSBadgeViewStyleError = 2,
};


SWIFT_CLASS("_TtC14OfficeUIFabric14MSBlurringView")
@interface MSBlurringView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end



enum MSButtonStyle : NSInteger;

SWIFT_CLASS("_TtC14OfficeUIFabric8MSButton")
@interface MSButton : UIButton
@property (nonatomic) enum MSButtonStyle style;
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@property (nonatomic, getter=isEnabled) BOOL enabled;
- (nonnull instancetype)initWithStyle:(enum MSButtonStyle)style OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, MSButtonStyle, closed) {
  MSButtonStylePrimaryFilled = 0,
  MSButtonStylePrimaryOutline = 1,
  MSButtonStyleSecondaryOutline = 2,
  MSButtonStyleBorderless = 3,
};


SWIFT_CLASS("_TtC14OfficeUIFabric23MSCalendarConfiguration")
@interface MSCalendarConfiguration : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) MSCalendarConfiguration * _Nonnull default_;)
+ (MSCalendarConfiguration * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) NSInteger firstWeekday;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14OfficeUIFabric19MSCenteredLabelCell")
@interface MSCenteredLabelCell : UITableViewCell
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
@end


SWIFT_CLASS("_TtC14OfficeUIFabric8MSColors")
@interface MSColors : NSObject
/// #0078D4
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull primary;)
+ (UIColor * _Nonnull)primary SWIFT_WARN_UNUSED_RESULT;
+ (void)setPrimary:(UIColor * _Nonnull)value;
/// #E1EFFA
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull lightPrimary;)
+ (UIColor * _Nonnull)lightPrimary SWIFT_WARN_UNUSED_RESULT;
+ (void)setLightPrimary:(UIColor * _Nonnull)value;
/// #A8A8AC
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull lightGray;)
+ (UIColor * _Nonnull)lightGray SWIFT_WARN_UNUSED_RESULT;
+ (void)setLightGray:(UIColor * _Nonnull)value;
/// #8E8E93
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull gray;)
+ (UIColor * _Nonnull)gray SWIFT_WARN_UNUSED_RESULT;
+ (void)setGray:(UIColor * _Nonnull)value;
/// #777777
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull darkGray;)
+ (UIColor * _Nonnull)darkGray SWIFT_WARN_UNUSED_RESULT;
+ (void)setDarkGray:(UIColor * _Nonnull)value;
/// #F8F8F8
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull backgroundLightGray;)
+ (UIColor * _Nonnull)backgroundLightGray SWIFT_WARN_UNUSED_RESULT;
+ (void)setBackgroundLightGray:(UIColor * _Nonnull)value;
/// #F1F1F1
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull backgroundGray;)
+ (UIColor * _Nonnull)backgroundGray SWIFT_WARN_UNUSED_RESULT;
+ (void)setBackgroundGray:(UIColor * _Nonnull)value;
/// #E1E1E1
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull borderLightGray;)
+ (UIColor * _Nonnull)borderLightGray SWIFT_WARN_UNUSED_RESULT;
+ (void)setBorderLightGray:(UIColor * _Nonnull)value;
/// #C8C8C8
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull borderGray;)
+ (UIColor * _Nonnull)borderGray SWIFT_WARN_UNUSED_RESULT;
+ (void)setBorderGray:(UIColor * _Nonnull)value;
/// #FFFFFF
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull white;)
+ (UIColor * _Nonnull)white SWIFT_WARN_UNUSED_RESULT;
+ (void)setWhite:(UIColor * _Nonnull)value;
/// #222222
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull black;)
+ (UIColor * _Nonnull)black SWIFT_WARN_UNUSED_RESULT;
+ (void)setBlack:(UIColor * _Nonnull)value;
/// #E8484C
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull error;)
+ (UIColor * _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
+ (void)setError:(UIColor * _Nonnull)value;
/// #FFF3F4
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull lightError;)
+ (UIColor * _Nonnull)lightError SWIFT_WARN_UNUSED_RESULT;
+ (void)setLightError:(UIColor * _Nonnull)value;
/// #574305
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull warning;)
+ (UIColor * _Nonnull)warning SWIFT_WARN_UNUSED_RESULT;
+ (void)setWarning:(UIColor * _Nonnull)value;
/// #E2DDCC
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull lightWarning;)
+ (UIColor * _Nonnull)lightWarning SWIFT_WARN_UNUSED_RESULT;
+ (void)setLightWarning:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<UIColor *> * _Nonnull avatarBackgroundColors;)
+ (NSArray<UIColor *> * _Nonnull)avatarBackgroundColors SWIFT_WARN_UNUSED_RESULT;
+ (void)setAvatarBackgroundColors:(NSArray<UIColor *> * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull background;)
+ (UIColor * _Nonnull)background SWIFT_WARN_UNUSED_RESULT;
+ (void)setBackground:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull buttonImage;)
+ (UIColor * _Nonnull)buttonImage SWIFT_WARN_UNUSED_RESULT;
+ (void)setButtonImage:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull disabled;)
+ (UIColor * _Nonnull)disabled SWIFT_WARN_UNUSED_RESULT;
+ (void)setDisabled:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull foregroundRegular;)
+ (UIColor * _Nonnull)foregroundRegular SWIFT_WARN_UNUSED_RESULT;
+ (void)setForegroundRegular:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull foregroundSecondary;)
+ (UIColor * _Nonnull)foregroundSecondary SWIFT_WARN_UNUSED_RESULT;
+ (void)setForegroundSecondary:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull activityIndicator;)
+ (UIColor * _Nonnull)activityIndicator SWIFT_WARN_UNUSED_RESULT;
+ (void)setActivityIndicator:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull centeredLabelText;)
+ (UIColor * _Nonnull)centeredLabelText SWIFT_WARN_UNUSED_RESULT;
+ (void)setCenteredLabelText:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull separator;)
+ (UIColor * _Nonnull)separator SWIFT_WARN_UNUSED_RESULT;
+ (void)setSeparator:(UIColor * _Nonnull)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// Defines the string format of the date (time not included) of a Date
typedef SWIFT_ENUM(NSInteger, MSDateStringCompactness, closed) {
  MSDateStringCompactnessLongDaynameDayMonth = 1,
  MSDateStringCompactnessLongDaynameDayMonthYear = 2,
  MSDateStringCompactnessShortDayname = 3,
  MSDateStringCompactnessShortDaynameShortMonthnameDay = 4,
  MSDateStringCompactnessShortDaynameShortMonthnameDayFullYear = 5,
  MSDateStringCompactnessPartialDaynameShortDayMonth = 6,
  MSDateStringCompactnessLongDaynameDayMonthHoursColumnsMinutes = 7,
  MSDateStringCompactnessShortDaynameShortMonthnameHoursColumnsMinutes = 8,
  MSDateStringCompactnessPartialDaynameShortDayMonthHoursColumsMinutes = 9,
  MSDateStringCompactnessPartialMonthnameDaynameFullYear = 10,
  MSDateStringCompactnessPartialMonthnameDaynameHoursColumnsMinutes = 11,
  MSDateStringCompactnessPartialMonthnameDayname = 12,
  MSDateStringCompactnessLongMonthNameFullYear = 13,
  MSDateStringCompactnessShortDaynameHoursColumnMinutes = 14,
  MSDateStringCompactnessShortDayMonth = 15,
  MSDateStringCompactnessLongDayMonthYearTime = 16,
  MSDateStringCompactnessShortDaynameDayShortMonthYear = 17,
};

@protocol MSDateTimePickerDelegate;
@class UIViewController;
enum MSDateTimePickerMode : NSInteger;

/// Manages the presentation and coordination of different date and time pickers
SWIFT_CLASS("_TtC14OfficeUIFabric16MSDateTimePicker")
@interface MSDateTimePicker : NSObject
@property (nonatomic, weak) id <MSDateTimePickerDelegate> _Nullable delegate;
/// Presents a picker or set of pickers from a <code>presentingController</code> depending on the mode selected. Also handles accessibility replacement presentation.
/// \param presentingController The view controller that is presenting these pickers
///
/// \param mode Enum describing which mode of pickers should be presented
///
/// \param startDate The initial date selected on the presented pickers
///
/// \param endDate An optional end date to pick a range of dates. Ignored if mode is <code>.date</code> or <code>.dateTime</code>. If the mode selected is either <code>.dateRange</code> or <code>.dateTimeRange</code>, and this is omitted, it will be set to a default 1 day or 1 hour range, respectively.
///
- (void)presentFrom:(UIViewController * _Nonnull)presentingController with:(enum MSDateTimePickerMode)mode startDate:(NSDate * _Nonnull)startDate endDate:(NSDate * _Nullable)endDate;
- (void)dismiss;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_PROTOCOL("_TtP14OfficeUIFabric24MSDateTimePickerDelegate_")
@protocol MSDateTimePickerDelegate
/// Allows a class to be notified when a user confirms their selected date
- (void)dateTimePicker:(MSDateTimePicker * _Nonnull)dateTimePicker didPickStartDate:(NSDate * _Nonnull)startDate endDate:(NSDate * _Nonnull)endDate;
@optional
/// Allows for some validation and cancellation of picking behavior, including the dismissal of DateTimePicker classes when Done is pressed. If false is returned, the dismissal and <code>didPickStartDate</code> delegate calls will not occur. This is not called when dismissing the modal without selection, such as when tapping outside to dismiss.
- (BOOL)dateTimePicker:(MSDateTimePicker * _Nonnull)dateTimePicker shouldEndPickingStartDate:(NSDate * _Nonnull)startDate endDate:(NSDate * _Nonnull)endDate SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, MSDateTimePickerMode, closed) {
  MSDateTimePickerModeDate = 0,
  MSDateTimePickerModeDateTime = 1,
  MSDateTimePickerModeDateRange = 2,
  MSDateTimePickerModeDateTimeRange = 3,
};


SWIFT_CLASS("_TtC14OfficeUIFabric13MSDimmingView")
@interface MSDimmingView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end




SWIFT_CLASS("_TtC14OfficeUIFabric9MSDotView")
@interface MSDotView : UIView
@property (nonatomic, strong) UIColor * _Nullable color;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)drawRect:(CGRect)rect;
@end

enum MSDrawerResizingBehavior : NSInteger;
@protocol MSDrawerControllerDelegate;
enum MSDrawerPresentationDirection : NSInteger;
@class UIBarButtonItem;
@protocol UIViewControllerTransitionCoordinator;
@class NSBundle;

/// <code>MSDrawerController</code> is used to present a portion of UI in a slider frame that shows up or down on iPhone and in a popover on iPad.
/// Use <code>presentationDirection</code> to pick the direction of presentation and <code>presentationOrigin</code> to specify the vertical offset (in screen coordinates) from which to show drawer. If not provided it will be calculated automatically: bottom of navigation bar for <code>.down</code> presentation and bottom of the screen for <code>.up</code> presentation.
/// <code>MSDrawerController</code> will be presented as a popover on iPad and so requires either <code>sourceView</code>/<code>sourceRect</code> or <code>barButtonItem</code> to be provided via available initializers. Use <code>permittedArrowDirections</code> to specify the direction of the popover arrow.
/// Set either <code>contentController</code> or <code>contentView</code> to provide content for the drawer. Desired content size can be specified by using either drawer’s or content controller’s <code>preferredContentSize</code>.
/// Use <code>resizingBehavior</code> to allow a user to resize or dismiss the drawer by tapping and dragging any area that does not handle this gesture itself.
SWIFT_CLASS("_TtC14OfficeUIFabric18MSDrawerController")
@interface MSDrawerController : UIViewController
/// Set <code>contentController</code> to provide a controller that will represent drawer’s content. Its view will be hosted in the root view of the drawer and will be sized and positioned to accommodate any shell UI of the drawer.
/// Content controller can provide <code>preferredContentSize</code> which will be used as a content size to calculate the size of the drawer on screen.
@property (nonatomic, strong) UIViewController * _Nullable contentController;
/// Set <code>contentView</code> to provide a view that will represent drawer’s content. It will be hosted in the root view of the drawer and will be sized and positioned to accommodate any shell UI of the drawer.
/// If you want to specify the size of the content inside the drawer then you can do this through drawer’s <code>preferredContentSize</code> which will be used to calculate the size of the drawer on screen.
@property (nonatomic, strong) UIView * _Nullable contentView;
/// When <code>resizingBehavior</code> is not <code>.none</code> a user can resize the drawer by tapping and dragging any area that does not handle this gesture itself. For example, if <code>contentController</code> constains a <code>UINavigationController</code>, a user can tap and drag navigation bar to resize the drawer.
/// By resizing a drawer a user can switch between several predefined states:
/// <ul>
///   <li>
///     a drawer can be expanded (see <code>isExpanded</code> property);
///   </li>
///   <li>
///     returned to normal state from expanded state;
///   </li>
///   <li>
///     or dismissed.
///   </li>
/// </ul>
/// When <code>resizingBehavior</code> is <code>.dismiss</code> the expanding behavior is not available - drawer can only be dismissed.
/// The corresponding <code>delegate</code> methods will be called for these state changes: see <code>drawerControllerDidChangeExpandedState</code> and <code>drawerControllerWillDismiss</code>/<code>drawerControllerDidDismiss</code>.
/// Resizing is supported only on iPhone in compact environment (when drawer is presented as a slideover).
@property (nonatomic) enum MSDrawerResizingBehavior resizingBehavior;
/// Set <code>isExpanded</code> to <code>true</code> to maximize the drawer’s height to fill the device screen vertically minus the safe areas. Set to <code>false</code> to restore it to the normal size.
/// Transition is always animated when drawer is visible.
@property (nonatomic) BOOL isExpanded;
/// Use <code>permittedArrowDirections</code> to specify the direction of the popover arrow for popover presentation on iPad.
@property (nonatomic) UIPopoverArrowDirection permittedArrowDirections;
@property (nonatomic) CGSize preferredContentSize;
/// <code>onDismiss</code> is called when drawer is being dismissed.
@property (nonatomic, copy) void (^ _Nullable onDismiss)(void);
/// <code>onDismissCompleted</code> is called after drawer has been dismissed.
@property (nonatomic, copy) void (^ _Nullable onDismissCompleted)(void);
@property (nonatomic, weak) id <MSDrawerControllerDelegate> _Nullable delegate;
/// Initializes <code>MSDrawerController</code> to be presented as a popover from <code>sourceRect</code> in <code>sourceView</code> on iPad and as a slideover on iPhone.
/// \param sourceView The view containing the anchor rectangle for the popover.
///
/// \param sourceRect The rectangle in the specified view in which to anchor the popover.
///
/// \param presentationOrigin The vertical offset (in screen coordinates) from which to show a slideover. If not provided it will be calculated automatically: bottom of navigation bar for <code>.down</code> presentation and bottom of the screen for <code>.up</code> presentation.
///
/// \param presentationDirection The direction of slideover presentation (<code>.down</code> or <code>.up</code>).
///
- (nonnull instancetype)initWithSourceView:(UIView * _Nonnull)sourceView sourceRect:(CGRect)sourceRect presentationOrigin:(CGFloat)presentationOrigin presentationDirection:(enum MSDrawerPresentationDirection)presentationDirection OBJC_DESIGNATED_INITIALIZER;
/// Initializes <code>MSDrawerController</code> to be presented as a popover from <code>barButtonItem</code> on iPad and as a slideover on iPhone.
/// \param barButtonItem The bar button item on which to anchor the popover.
///
/// \param presentationOrigin The vertical offset (in screen coordinates) from which to show a slideover. If not provided it will be calculated automatically: bottom of navigation bar for <code>.down</code> presentation and bottom of the screen for <code>.up</code> presentation.
///
/// \param presentationDirection The direction of slideover presentation (<code>.down</code> or <code>.up</code>).
///
- (nonnull instancetype)initWithBarButtonItem:(UIBarButtonItem * _Nonnull)barButtonItem presentationOrigin:(CGFloat)presentationOrigin presentationDirection:(enum MSDrawerPresentationDirection)presentationDirection OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)viewWillLayoutSubviews;
- (BOOL)accessibilityPerformEscape SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UIPresentationController;
@class UITraitCollection;

@interface MSDrawerController (SWIFT_EXTENSION(OfficeUIFabric)) <UIPopoverPresentationControllerDelegate>
- (UIModalPresentationStyle)adaptivePresentationStyleForPresentationController:(UIPresentationController * _Nonnull)controller traitCollection:(UITraitCollection * _Nonnull)traitCollection SWIFT_WARN_UNUSED_RESULT;
@end

@protocol UIViewControllerAnimatedTransitioning;

@interface MSDrawerController (SWIFT_EXTENSION(OfficeUIFabric)) <UIViewControllerTransitioningDelegate>
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForPresentedController:(UIViewController * _Nonnull)presented presentingController:(UIViewController * _Nonnull)presenting sourceController:(UIViewController * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForDismissedController:(UIViewController * _Nonnull)dismissed SWIFT_WARN_UNUSED_RESULT;
- (UIPresentationController * _Nullable)presentationControllerForPresentedViewController:(UIViewController * _Nonnull)presented presentingViewController:(UIViewController * _Nullable)presenting sourceViewController:(UIViewController * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP14OfficeUIFabric26MSDrawerControllerDelegate_")
@protocol MSDrawerControllerDelegate
@optional
/// Called when a user resizes the drawer enough to change its expanded state. Use <code>isExpanded</code> property to get the current state.
/// Use this method to turn on/off specific UI features of your drawer’s content that depend on expanded state. Method is called after expanded state has been changed but before animation is completed.
- (void)drawerControllerDidChangeExpandedState:(MSDrawerController * _Nonnull)controller;
/// Called when drawer is being dismissed.
- (void)drawerControllerWillDismiss:(MSDrawerController * _Nonnull)controller;
/// Called after drawer has been dismissed.
- (void)drawerControllerDidDismiss:(MSDrawerController * _Nonnull)controller;
@end

typedef SWIFT_ENUM(NSInteger, MSDrawerPresentationDirection, closed) {
  MSDrawerPresentationDirectionDown = 0,
  MSDrawerPresentationDirectionUp = 1,
};

typedef SWIFT_ENUM(NSInteger, MSDrawerResizingBehavior, closed) {
  MSDrawerResizingBehaviorNone = 0,
  MSDrawerResizingBehaviorDismiss = 1,
  MSDrawerResizingBehaviorDismissOrExpand = 2,
};

@class UIEvent;

SWIFT_CLASS("_TtC14OfficeUIFabric15MSEasyTapButton")
@interface MSEasyTapButton : UIButton
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIFont;

SWIFT_CLASS("_TtC14OfficeUIFabric7MSFonts")
@interface MSFonts : NSObject
/// Semibold 28pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull title1;)
+ (UIFont * _Nonnull)title1 SWIFT_WARN_UNUSED_RESULT;
/// Semibold 22pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull title2;)
+ (UIFont * _Nonnull)title2 SWIFT_WARN_UNUSED_RESULT;
/// Semibold 17pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull headline;)
+ (UIFont * _Nonnull)headline SWIFT_WARN_UNUSED_RESULT;
/// Regular 17pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull body;)
+ (UIFont * _Nonnull)body SWIFT_WARN_UNUSED_RESULT;
/// Regular 15pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull subhead;)
+ (UIFont * _Nonnull)subhead SWIFT_WARN_UNUSED_RESULT;
/// Regular 13pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull footnote;)
+ (UIFont * _Nonnull)footnote SWIFT_WARN_UNUSED_RESULT;
/// Regular 12pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull caption1;)
+ (UIFont * _Nonnull)caption1 SWIFT_WARN_UNUSED_RESULT;
/// Regular 11pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull caption2;)
+ (UIFont * _Nonnull)caption2 SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@protocol MSHUDDelegate;
@class MSHUDParams;

SWIFT_CLASS("_TtC14OfficeUIFabric5MSHUD")
@interface MSHUD : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MSHUD * _Nonnull shared;)
+ (MSHUD * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, weak) id <MSHUDDelegate> _Nullable delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (void)showIn:(UIView * _Nonnull)view;
- (void)showIn:(UIView * _Nonnull)view with:(MSHUDParams * _Nonnull)params;
- (void)showFrom:(UIViewController * _Nonnull)controller;
- (void)showFrom:(UIViewController * _Nonnull)controller with:(MSHUDParams * _Nonnull)params;
- (void)showSuccessIn:(UIView * _Nonnull)view with:(NSString * _Nonnull)caption;
- (void)showSuccessFrom:(UIViewController * _Nonnull)controller with:(NSString * _Nonnull)caption;
- (void)showFailureIn:(UIView * _Nonnull)view with:(NSString * _Nonnull)caption;
- (void)showFailureFrom:(UIViewController * _Nonnull)controller with:(NSString * _Nonnull)caption;
- (void)hideAnimated:(BOOL)animated;
@end

@class UIWindow;

SWIFT_PROTOCOL("_TtP14OfficeUIFabric13MSHUDDelegate_")
@protocol MSHUDDelegate
- (UIWindow * _Nullable)defaultWindowForHUD:(MSHUD * _Nonnull)hud SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC14OfficeUIFabric11MSHUDParams")
@interface MSHUDParams : NSObject
@property (nonatomic, copy) NSString * _Nonnull caption;
@property (nonatomic, strong) UIImage * _Nullable image;
@property (nonatomic) BOOL isBlocking;
@property (nonatomic) BOOL isPersistent;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithCaption:(NSString * _Nonnull)caption image:(UIImage * _Nullable)image isPersistent:(BOOL)isPersistent isBlocking:(BOOL)isBlocking;
@end

enum MSTextColorStyle : NSInteger;
enum MSTextStyle : NSInteger;

SWIFT_CLASS("_TtC14OfficeUIFabric7MSLabel")
@interface MSLabel : UILabel
@property (nonatomic) enum MSTextColorStyle colorStyle;
@property (nonatomic) enum MSTextStyle style;
- (nonnull instancetype)initWithStyle:(enum MSTextStyle)style colorStyle:(enum MSTextColorStyle)colorStyle OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// Presents viewController views as “cards” in a paged scrollView
SWIFT_CLASS("_TtC14OfficeUIFabric29MSPageCardPresenterController")
@interface MSPageCardPresenterController : UIViewController
@property (nonatomic) UIModalPresentationStyle modalPresentationStyle;
@property (nonatomic, strong) id <UIViewControllerTransitioningDelegate> _Nullable transitioningDelegate;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillLayoutSubviews;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface MSPageCardPresenterController (SWIFT_EXTENSION(OfficeUIFabric)) <UIViewControllerTransitioningDelegate>
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForPresentedController:(UIViewController * _Nonnull)presented presentingController:(UIViewController * _Nonnull)presenting sourceController:(UIViewController * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForDismissedController:(UIViewController * _Nonnull)dismissed SWIFT_WARN_UNUSED_RESULT;
- (UIPresentationController * _Nullable)presentationControllerForPresentedViewController:(UIViewController * _Nonnull)presented presentingViewController:(UIViewController * _Nullable)presenting sourceViewController:(UIViewController * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
@end

@class UIScrollView;

@interface MSPageCardPresenterController (SWIFT_EXTENSION(OfficeUIFabric)) <UIScrollViewDelegate>
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)scrollView willDecelerate:(BOOL)decelerate;
@end


SWIFT_PROTOCOL("_TtP14OfficeUIFabric9MSPersona_")
@protocol MSPersona
@property (nonatomic, readonly, strong) UIImage * _Nullable avatarImage;
@property (nonatomic, readonly, copy) NSString * _Nonnull email;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull subtitle;
@end

enum CustomViewSize : NSInteger;
enum MSTableViewCellAccessoryType : NSInteger;
@class UITouch;

/// <code>MSTableViewCell</code> is used to present a cell with one, two, or three lines of text with an optional custom view and an accessory.
/// The <code>title</code> is displayed as the first line of text with the <code>subtitle</code> as the second line and the <code>footer</code> the third line.
/// If a <code>subtitle</code> and <code>footer</code> are not provided the cell will be configured as a “small” size cell showing only the <code>title</code> line of text and a smaller custom view.
/// If a <code>subtitle</code> is provided and a <code>footer</code> is not provided the cell will display two lines of text and will leave space for the <code>title</code> if it is not provided.
/// If a <code>footer</code> is provided the cell will display three lines of text and will leave space for the <code>subtitle</code> and <code>title</code> if they are not provided.
/// If a <code>customView</code> is not provided the <code>customView</code> will be hidden and the displayed text will take up the empty space left by the hidden <code>customView</code>.
/// Specify <code>accessoryType</code> on setup to show either a disclosure indicator or a <code>detailButton</code>. The <code>detailButton</code> will display a button with an ellipsis icon which can be configured by passing in a closure to the cell’s <code>onAccessoryTapped</code> property or by implementing UITableViewDelegate’s <code>accessoryButtonTappedForRowWith</code> method.
SWIFT_CLASS("_TtC14OfficeUIFabric15MSTableViewCell")
@interface MSTableViewCell : UITableViewCell
/// The height for the cell based on the text provided. Useful when <code>numberOfLines</code> of <code>title</code>, <code>subtitle</code>, <code>footer</code> is 1.
/// <code>smallHeight</code> - Height for the cell when only the <code>title</code> is provided in a single line of text.
/// <code>mediumHeight</code> - Height for the cell when only the <code>title</code> and <code>subtitle</code> are provided in 2 lines of text.
/// <code>largeHeight</code> - Height for the cell when the <code>title</code>, <code>subtitle</code>, and <code>footer</code> are provided in 3 lines of text.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat smallHeight;)
+ (CGFloat)smallHeight SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat mediumHeight;)
+ (CGFloat)mediumHeight SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat largeHeight;)
+ (CGFloat)largeHeight SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull identifier;)
+ (NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Use the appropriate left inset for the cell separator based on the size of the <code>customView</code> provided.
/// <code>separatorLeftInsetForSmallCustomView</code> - For use when displaying a cell with a small size custom view.
/// <code>separatorLeftInsetForMediumCustomView</code> - For use when displaying a cell with a medium size custom view.
/// <code>separatorLeftInsetForNoCustomView</code> - For use when no custom view is provided.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat separatorLeftInsetForSmallCustomView;)
+ (CGFloat)separatorLeftInsetForSmallCustomView SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat separatorLeftInsetForMediumCustomView;)
+ (CGFloat)separatorLeftInsetForMediumCustomView SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat separatorLeftInsetForNoCustomView;)
+ (CGFloat)separatorLeftInsetForNoCustomView SWIFT_WARN_UNUSED_RESULT;
/// The height of the cell based on the height of its content.
/// \param title The title string
///
/// \param subtitle The subtitle string
///
/// \param footer The footer string
///
/// \param customViewSize The custom view size for the cell based on <code>MSTableViewCell.CustomViewSize</code>
///
/// \param customAccessoryView The custom accessory view that appears near the trailing edge of the cell
///
/// \param accessoryType The <code>MSTableViewCellAccessoryType</code> that the cell should display
///
/// \param titleNumberOfLines The number of lines that the title should display
///
/// \param subtitleNumberOfLines The number of lines that the subtitle should display
///
/// \param footerNumberOfLines The number of lines that the footer should display
///
/// \param containerWidth The width of the cell’s super view (e.g. the table view’s width)
///
///
/// returns:
/// a value representing the calculated height of the cell
+ (CGFloat)heightWithTitle:(NSString * _Nonnull)title subtitle:(NSString * _Nonnull)subtitle footer:(NSString * _Nonnull)footer customViewSize:(enum CustomViewSize)customViewSize customAccessoryView:(UIView * _Nullable)customAccessoryView accessoryType:(enum MSTableViewCellAccessoryType)accessoryType titleNumberOfLines:(NSInteger)titleNumberOfLines subtitleNumberOfLines:(NSInteger)subtitleNumberOfLines footerNumberOfLines:(NSInteger)footerNumberOfLines containerWidth:(CGFloat)containerWidth SWIFT_WARN_UNUSED_RESULT;
/// The maximum number of lines to be shown for <code>title</code>
@property (nonatomic) NSInteger titleNumberOfLines;
/// The maximum number of lines to be shown for <code>subtitle</code>
@property (nonatomic) NSInteger subtitleNumberOfLines;
/// The maximum number of lines to be shown for <code>footer</code>
@property (nonatomic) NSInteger footerNumberOfLines;
/// Updates the lineBreakMode of the <code>title</code>
@property (nonatomic) NSLineBreakMode titleLineBreakMode;
/// Updates the lineBreakMode of the <code>subtitle</code>
@property (nonatomic) NSLineBreakMode subtitleLineBreakMode;
/// Updates the lineBreakMode of the <code>footer</code>
@property (nonatomic) NSLineBreakMode footerLineBreakMode;
/// Override to set a specific <code>CustomViewSize</code> on the <code>customView</code>
@property (nonatomic, readonly) enum CustomViewSize customViewSize;
/// <code>onAccessoryTapped</code> is called when <code>detailButton</code> accessory view is tapped
@property (nonatomic, copy) void (^ _Nullable onAccessoryTapped)(void);
/// <code>onSelected</code> is called when the cell is selected during <code>touchesEnded</code> event
@property (nonatomic, copy) void (^ _Nullable onSelected)(void);
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@property (nonatomic) CGRect bounds;
@property (nonatomic) CGRect frame;
@property (nonatomic) UIEdgeInsets separatorInset;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Sets up the cell with text, a custom view, and an accessory type
/// \param title Text that appears as the first line of text
///
/// \param subtitle Text that appears as the second line of text
///
/// \param footer Text that appears as the third line of text
///
/// \param customView The custom view that appears near the leading edge next to the text
///
/// \param customAccessoryView The view acting as an accessory view that appears on the trailing edge, next to the accessory type if provided
///
/// \param accessoryType The type of accessory that appears on the trailing edge: a disclosure indicator or a details button with an ellipsis icon
///
- (void)setupWithTitle:(NSString * _Nonnull)title subtitle:(NSString * _Nonnull)subtitle footer:(NSString * _Nonnull)footer customView:(UIView * _Nullable)customView customAccessoryView:(UIView * _Nullable)customAccessoryView accessoryType:(enum MSTableViewCellAccessoryType)accessoryType;
- (void)layoutSubviews;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)safeAreaInsetsDidChange SWIFT_AVAILABILITY(ios,introduced=11);
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
@end

typedef SWIFT_ENUM(NSInteger, CustomViewSize, closed) {
  CustomViewSizeDefault = 0,
  CustomViewSizeZero = 1,
  CustomViewSizeSmall = 2,
  CustomViewSizeMedium = 3,
};


SWIFT_CLASS("_TtC14OfficeUIFabric13MSPersonaCell")
@interface MSPersonaCell : MSTableViewCell
@property (nonatomic, readonly) enum CustomViewSize customViewSize;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14OfficeUIFabric13MSPersonaData")
@interface MSPersonaData : NSObject <MSPersona>
@property (nonatomic, strong) UIImage * _Nullable avatarImage;
@property (nonatomic, copy) NSString * _Nonnull email;
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, copy) NSString * _Nonnull subtitle;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name email:(NSString * _Nonnull)email subtitle:(NSString * _Nonnull)subtitle avatarImage:(UIImage * _Nullable)avatarImage OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@protocol MSPersonaListViewSearchDirectoryDelegate;
enum MSPersonaListViewSelectionDirection : NSInteger;

SWIFT_CLASS("_TtC14OfficeUIFabric17MSPersonaListView")
@interface MSPersonaListView : UITableView
/// The personas to display in the list view
@property (nonatomic, copy) NSArray<id <MSPersona>> * _Nonnull personaList;
/// The type of accessory that appears on the trailing edge: a disclosure indicator or a details button with an ellipsis icon
@property (nonatomic) enum MSTableViewCellAccessoryType accessoryType;
/// Bool indicating whether the ‘Search Directory’ button should be shown
@property (nonatomic) BOOL showsSearchDirectoryButton;
@property (nonatomic, weak) id <MSPersonaListViewSearchDirectoryDelegate> _Nullable searchDirectoryDelegate;
/// Callback with the selected MSPersona
@property (nonatomic, copy) void (^ _Nullable onPersonaSelected)(id <MSPersona> _Nonnull);
- (nonnull instancetype)initWithFrame:(CGRect)frame style:(UITableViewStyle)style SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Selects a persona using the index path for selected row
- (void)pickPersona;
/// Selects / deselects a row based on the MSPersonaListViewSelectionDirection value
/// \param direction The MSPersonaListViewSelectionDirection value to select a ‘next’ or ‘previous’ cell
///
- (void)selectPersonaWithDirection:(enum MSPersonaListViewSelectionDirection)direction;
@end


@interface MSPersonaListView (SWIFT_EXTENSION(OfficeUIFabric)) <UITableViewDelegate>
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface MSPersonaListView (SWIFT_EXTENSION(OfficeUIFabric)) <UITableViewDataSource>
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP14OfficeUIFabric40MSPersonaListViewSearchDirectoryDelegate_")
@protocol MSPersonaListViewSearchDirectoryDelegate
- (void)personaListSearchDirectory:(MSPersonaListView * _Nonnull)personaListView completion:(void (^ _Nonnull)(BOOL))completion;
@end

typedef SWIFT_ENUM(NSInteger, MSPersonaListViewSelectionDirection, closed) {
  MSPersonaListViewSelectionDirectionNext = 1,
  MSPersonaListViewSelectionDirectionPrev = -1,
};

@class MSPopupMenuItem;
@class MSPopupMenuSection;

/// <code>MSPopupMenuController</code> is used to present a popup menu that slides from top or bottom depending on <code>presentationDirection</code>. Use <code>presentationOrigin</code> to specify the vertical offset (in screen coordinates) from which to show popup menu. If not provided it will be calculated automatically: bottom of navigation bar for <code>.down</code> presentation and bottom of the screen for <code>.up</code> presentation.
/// When presented as a slide over, <code>MSPopupMenuController</code> will have a resizing handle that provides a user an alternative way to dismiss it.
/// <code>MSPopupMenuController</code> will be presented as a popover on iPad and so requires either <code>sourceView</code>/<code>sourceRect</code> or <code>barButtonItem</code> to be provided via available initializers. Use <code>permittedArrowDirections</code> to specify the direction of the popover arrow.
SWIFT_CLASS("_TtC14OfficeUIFabric21MSPopupMenuController")
@interface MSPopupMenuController : MSDrawerController
@property (nonatomic, strong) UIView * _Nullable contentView;
@property (nonatomic) enum MSDrawerResizingBehavior resizingBehavior;
@property (nonatomic) CGSize preferredContentSize;
/// Set <code>headerItem</code> to show a menu header. Header is not interactable and does not scroll.
@property (nonatomic, strong) MSPopupMenuItem * _Nullable headerItem;
/// Use <code>selectedItemIndexPath</code> to get or set the selected menu item instead of doing this via <code>MSPopupMenuItem</code> directly
@property (nonatomic, copy) NSIndexPath * _Nullable selectedItemIndexPath;
/// Append new items to the last section of the menu
/// note:
/// If there is no section in the menu, create a new one without header and append the items to it
- (void)addItems:(NSArray<MSPopupMenuItem *> * _Nonnull)items;
/// Append a new section to the end of menu
- (void)addSection:(MSPopupMenuSection * _Nonnull)section;
/// Append new sections to the end of menu
- (void)addSections:(NSArray<MSPopupMenuSection *> * _Nonnull)sections;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillLayoutSubviews;
- (void)viewDidLayoutSubviews;
- (nonnull instancetype)initWithSourceView:(UIView * _Nonnull)sourceView sourceRect:(CGRect)sourceRect presentationOrigin:(CGFloat)presentationOrigin presentationDirection:(enum MSDrawerPresentationDirection)presentationDirection OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBarButtonItem:(UIBarButtonItem * _Nonnull)barButtonItem presentationOrigin:(CGFloat)presentationOrigin presentationDirection:(enum MSDrawerPresentationDirection)presentationDirection OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIGestureRecognizer;

@interface MSPopupMenuController (SWIFT_EXTENSION(OfficeUIFabric)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end


@interface MSPopupMenuController (SWIFT_EXTENSION(OfficeUIFabric)) <UITableViewDataSource>
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


@interface MSPopupMenuController (SWIFT_EXTENSION(OfficeUIFabric)) <UITableViewDelegate>
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nullable)tableView:(UITableView * _Nonnull)tableView viewForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (NSIndexPath * _Nullable)tableView:(UITableView * _Nonnull)tableView willSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


/// <code>MSPopupMenuItem</code> represents a menu item inside <code>MSPopupMenuController</code>.
SWIFT_CLASS("_TtC14OfficeUIFabric15MSPopupMenuItem")
@interface MSPopupMenuItem : NSObject
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
@property (nonatomic, readonly, strong) UIImage * _Nullable selectedImage;
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@property (nonatomic, readonly, copy) NSString * _Nullable subtitle;
@property (nonatomic) BOOL isEnabled;
@property (nonatomic) BOOL isSelected;
@property (nonatomic, readonly, copy) void (^ _Nullable onSelected)(void);
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image selectedImage:(UIImage * _Nullable)selectedImage title:(NSString * _Nonnull)title subtitle:(NSString * _Nullable)subtitle isEnabled:(BOOL)isEnabled isSelected:(BOOL)isSelected onSelected:(void (^ _Nullable)(void))onSelected OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImageName:(NSString * _Nonnull)imageName generateSelectedImage:(BOOL)generateSelectedImage title:(NSString * _Nonnull)title subtitle:(NSString * _Nullable)subtitle isEnabled:(BOOL)isEnabled isSelected:(BOOL)isSelected onSelected:(void (^ _Nullable)(void))onSelected;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// <code>MSPopupMenuSection</code> represents a section of menu items inside <code>MSPopupMenuController</code>.
SWIFT_CLASS("_TtC14OfficeUIFabric18MSPopupMenuSection")
@interface MSPopupMenuSection : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSArray<MSPopupMenuItem *> * _Nonnull items;
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)title items:(NSArray<MSPopupMenuItem *> * _Nonnull)items OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14OfficeUIFabric20MSResizingHandleView")
@interface MSResizingHandleView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)layoutSubviews;
@end


/// A styled segmented control that should be used instead of UISegmentedControl. It is designed to flex the button width proportionally to the control’s width.
SWIFT_CLASS("_TtC14OfficeUIFabric18MSSegmentedControl")
@interface MSSegmentedControl : UIControl
@property (nonatomic, getter=isEnabled) BOOL enabled;
@property (nonatomic) BOOL isAnimated;
@property (nonatomic, readonly) NSInteger numberOfSegments;
@property (nonatomic) NSInteger selectedSegmentIndex;
- (nonnull instancetype)init;
/// Initializes a segmented control with the specified titles.
/// \param items An array of title strings representing the segments for this control.
///
- (nonnull instancetype)initWithItems:(NSArray<NSString *> * _Nonnull)items OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Insert new segment at index with the specified title. If a segment exists at that index, it will be inserted before and will therefore take its index.
/// \param title The title of the newly created segment
///
/// \param index The index at which to insert the newly created segment
///
- (void)insertSegmentWithTitle:(NSString * _Nonnull)title at:(NSInteger)index;
/// Remove the segment at the appropriate index. If there are only 2 segments in the control, or if no segment exists at the index, this method is ignored. If the segment is currently selected, we change the selection
/// \param index The index of the segment to be removed.
///
- (void)removeSegmentAt:(NSInteger)index;
/// Select segment at index
/// Warning: when called, handlers on UIControlEvents.ValueChanged are not called
/// \param index The index of the segment to set as selected
///
/// \param animated Whether or not to animate the change in selected segment
///
- (void)selectSegmentAt:(NSInteger)index animated:(BOOL)animated;
- (void)layoutSubviews;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC14OfficeUIFabric11MSSeparator")
@interface MSSeparator : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, MSSeparatorOrientation, closed) {
  MSSeparatorOrientationHorizontal = 0,
  MSSeparatorOrientationVertical = 1,
};

typedef SWIFT_ENUM(NSInteger, MSSeparatorStyle, closed) {
  MSSeparatorStyleDefault = 0,
  MSSeparatorStyleShadow = 1,
};


typedef SWIFT_ENUM(NSInteger, MSTableViewCellAccessoryType, closed) {
  MSTableViewCellAccessoryTypeNone = 0,
  MSTableViewCellAccessoryTypeDisclosureIndicator = 1,
  MSTableViewCellAccessoryTypeDetailButton = 2,
};

typedef SWIFT_ENUM(NSInteger, MSTextColorStyle, closed) {
  MSTextColorStyleRegular = 0,
  MSTextColorStyleSecondary = 1,
  MSTextColorStyleWhite = 2,
  MSTextColorStylePrimary = 3,
  MSTextColorStyleError = 4,
  MSTextColorStyleWarning = 5,
};

typedef SWIFT_ENUM(NSInteger, MSTextStyle, closed) {
  MSTextStyleTitle1 = 0,
  MSTextStyleTitle2 = 1,
  MSTextStyleHeadline = 2,
  MSTextStyleBody = 3,
  MSTextStyleSubhead = 4,
  MSTextStyleFootnote = 5,
  MSTextStyleCaption1 = 6,
  MSTextStyleCaption2 = 7,
};

/// Defines the string format of the time of a Date
typedef SWIFT_ENUM(NSInteger, MSTimeStringCompactness, closed) {
  MSTimeStringCompactnessHoursColumnsMinutes = 1,
  MSTimeStringCompactnessHours = 2,
};


SWIFT_CLASS("_TtC14OfficeUIFabric21MSTouchForwardingView")
@interface MSTouchForwardingView : UIView
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, MSTwoLinesTitleStyle, closed) {
  MSTwoLinesTitleStyleLight = 0,
  MSTwoLinesTitleStyleDark = 1,
};


SWIFT_CLASS("_TtC14OfficeUIFabric19MSTwoLinesTitleView")
@interface MSTwoLinesTitleView : UIView
- (nonnull instancetype)initWithStyle:(enum MSTwoLinesTitleStyle)style;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)layoutSubviews;
@property (nonatomic) BOOL isAccessibilityElement;
- (NSInteger)accessibilityElementCount SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)accessibilityElementAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)indexOfAccessibilityElement:(id _Nonnull)element SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, MSTwoLinesTitleViewButtonStyle, closed) {
  MSTwoLinesTitleViewButtonStyleDisclosure = 0,
  MSTwoLinesTitleViewButtonStyleDownArrow = 1,
};


SWIFT_PROTOCOL("_TtP14OfficeUIFabric27MSTwoLinesTitleViewDelegate_")
@protocol MSTwoLinesTitleViewDelegate
- (void)twoLinesTitleView:(MSTwoLinesTitleView * _Nonnull)twoLinesTitleView didTapOnTitle:(NSString * _Nonnull)title;
@end



typedef SWIFT_ENUM(NSInteger, ObscureStyle, closed) {
  ObscureStyleBlur = 0,
  ObscureStyleDim = 1,
};


SWIFT_CLASS("_TtC14OfficeUIFabric23OfficeUIFabricFramework")
@interface OfficeUIFabricFramework : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end








@interface UIImage (SWIFT_EXTENSION(OfficeUIFabric))
/// Full replacement for <code>UIImage(named:)</code> which attempts to recolor image assets with a color from the high contrast
/// color palette when <code>Darken Colors</code> is enabled. The method is called <code>static</code> because the images are outputted with
/// the rendering mode <code>AlwaysOriginal</code> with the intention of preventing further recoloring by <code>tintColor</code>.
+ (UIImage * _Nullable)staticImageNamed:(NSString * _Nonnull)name in:(NSBundle * _Nullable)bundle withPrimaryColorForDarkerSystemColors:(UIColor * _Nullable)darkerPrimaryColor SWIFT_WARN_UNUSED_RESULT;
@end




@interface UINavigationBar (SWIFT_EXTENSION(OfficeUIFabric))
- (void)hideBottomBorder;
@end








@interface UIViewController (SWIFT_EXTENSION(OfficeUIFabric))
/// Convenience method that adds a child view controller to the receiver and also establish the parent-children relationship between their corresponding views
- (void)addChildController:(UIViewController * _Nonnull)childController;
/// Convenience method that removes a child view controller from the receiver and also remove the parent-children relationship of the childViewController
- (void)removeChildController:(UIViewController * _Nonnull)childController;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
